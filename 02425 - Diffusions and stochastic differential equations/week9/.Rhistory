1+(x%%360)%/%90
(910%%360)
(910%%360)/90
(910%%360)%/%90
(360%%360)%/%90
####### Ex 13 ######
mym = matrix(1:4)
mym
####### Ex 13 ######
mym = matrix(1:4)
matrixfun = function(x){
x[which(x%%2 == 1)] = x[which(x%%2 == 1)]*2
}
matrixfun(mym)
matrixfun = function(x){
x[which(x%%2 == 1)] = x[which(x%%2 == 1)]*2
}
matrixfun(mym)
mym[which(mym%%2 == 1)]*2
mym
xx = matrixfun(mym)
xx
mym[which(mym%%2 == 1)] = mym[which(mym%%2 == 1)]*2
mym
matrixfun = function(x){
x[which(x%%2 == 1)] = x[which(x%%2 == 1)]*2
return(x)
}
xx = matrixfun(mym)
xx
####### Ex 13 ######
mym = matrix(1:4)
matrixfun = function(x){
x[which(x%%2 == 1)] = x[which(x%%2 == 1)]*2
return(x)
}
xx = matrixfun(mym)
matrixfun(mym)
####### Ex 14 ######
mym = matrix(1:4, nrow = 2)
matrixfun = function(x){
x[x%%2 == 1] = x[x%%2 == 1]*2
return(x)
}
matrixfun(mym)
matrixfun2 = function(x){
x[which(x%%2 == 1)] = x[which(x%%2 == 1)]*2
return(x)
}
matrixfun(mym)
matrixfun2(mym)
####### Ex 15 ######
mym = matrix(c(3, NA, NA, 4, 5, 6, 7, 9), nrow = 2); mym
mym[ , colSums(is.na(mym)) == 0]
mym[ , apply(mym, 2, function(x) !any(is.na(x)))]
colSums(is.na(mym)) == 0
colSums(is.na(mym))
is.na(mym)
mym[, !apply(is.na(mym), 2, any)]
!apply(is.na(mym), 2, any)
mym
apply(is.na(mym), 2, any)
!apply(is.na(mym), 2, any)
mym[, !apply(is.na(mym), 2, any), drop = F]
mym[, !apply(is.na(mym), 1, any), drop = F]
####### Ex 16 ######
myfun = function(a,b) a^b
myfun2 = function(a) a/(2:(length(a)+1))
myfun2 = function(a) {a/(2:(length(a)+1))}
myfun(1:10,5)
myfun2(1:10)
####### Ex 16 ######
myfun = function(a,b) a^b
myfun2 = function(a,b) {a^b/(2:(length(a)+1))}
myfun(1:10,5)
myfun2(1:10,5)
####### Ex 16 ######
mydf = function(...){
data = data.frame(cbind(...))
return(data)
}
a = c(3,5,6)
b = c(T,T,F)
c = c("Tom", "Ted", "Hank")
mydf(a,b,c)
TRUE
b = c(TRUE,TRUE,FALSE)
c = c("Tom", "Ted", "Hank")
mydf(a,b,c)
b = c(T,T,F)
c = c("Tom", "Ted", "Hank")
mydf(a,b,c)
a = c(3,5,6)
b = c(TRUE,TRUE,FALSE)
c = c("Tom", "Ted", "Hank")
mydf(a,b,c)
####### Ex 18 ######
invoice = function(pcs,unitprice){
price = pcs*unitprice
if(pcs>25){
return(price*0.9)
}else{
return(price)
}
}
invoice(56,89)
####### Ex 19 ######
doReturn = function(x,y){
a = 5*x + y
b = x + 7*y
r = 3*x + 9*y
t = x/y - 115
return(a,b,r,t)
}
doReturn(1,2)
return(list(a,b,r,t))
doReturn
####### Ex 19 ######
doReturn = function(x,y){
a = 5*x + y
b = x + 7*y
r = 3*x + 9*y
t = x/y - 115
return(list(a,b,r,t))
}
doReturn(1,2)
####### Ex 19 ######
doReturn = function(x,y){
a = 5*x + y
b = x + 7*y
r = 3*x + 9*y
t = x/y - 115
return(c(a,b,r,t))
}
doReturn(10,15)
####### Ex 20 ######
myplot <- function(...){
plot(... , pch = 12, lwd = 4,
col = "salmon",
cex = 0.9, xlab = "", ylab = "")
}
myplot(iris)
####### Ex 20 ######
myplot <- function(...){
plot(... , pch = 12, lwd = 4,
col = "salmon",
cex = 0.9, xlab = "", ylab = "")
}
myplot(iris)
myplot(lynx)
myplot(rivers)
####### Ex 21 ######
mymatrix = matrix(data = c(6,34,923,5,0, 112:116, 5,9,34,76,2, 545:549), nrow = 5)
mymatrix
apply(mymatrix,1,mean)
apply(mymatrix,1,mean)
apply(mymatrix,2,mean)
rowMeans(mymatrix)
colMeans(mymatrix)
apply(mymatrix, 2, sort)
apply(mymatrix, 2, sort(decreasing = T))
apply(mymatrix, 2, sort(x,decreasing = T))
apply(mymatrix, 2, sort(...,decreasing = T))
apply(mymatrix, 2, sort(,decreasing = T))
apply(mymatrix, 2, sort, decreasing=T)
apply(mymatrix, 2, sort, decreasing=TRUE)
apply(mymatrix, 2, sort)
apply(mymatrix, 2, sort, decreasing=FALSE)
apply(mymatrix, 2, sort, decreasing=TRUE)
####### Ex 22 ######
lapply(mtcars, min)
####### Ex 22 ######
l = lapply(mtcars, min)
s = sapply(mtcars, min)
s
m = mapply(mtcars, min)
m = mapply(min, mtcars)
m
lsm = list(l = l, s= s, m=m)
lsm
lapply(lsm, class)
apply(mymatrix, 2, function(x) sort(x,decreasing=TRUE))
sapply(lsm, class)
mapply(class,lsm)
10:1
####### Ex 23 ######
mapply(rep, c("A","F"), 10:1)
mapply(rep, c("A","F"), 10:1,USE.NAMES = FALSE)
Titanic
####### Ex 24 ######
tapply(Titanic, Sex, sum)
Titanic[1,]
Titanic[1,,]
dim(Titanic)
Titanic[1,,,]
Titanic[1,,1,1]
Titanic[1,1,,1]
Titanic[1,1,1,]
Titanic[,1,1,1]
####### Ex 24 ######
dim(Titanic)
Titanic[,1,1,1]
Titanic[1,,1,1]
Titanic[1,1,,1]
Titanic[1,1,1,]
apply(Titanic, 2, sum)
apply(Titanic, c(2,4), sum)
apply(Titanic, c(2,3), sum)
apply(Titanic, c(3,2), sum)
####### Ex 25 ######
first = matrix(38:66, 3)
second = matrix(56:91, 3)
third = matrix(82:145, 3)
fourth = matrix(46:93, 5)
listobj = list(first, second, third, fourth)
first
lapply(listobj, function(x) x[,2])
lapply(listobj, function(x) x[3,])
lapply(listobj, "[", ,2)
lapply(listobj, function(x) x[3,])
lapply(listobj, "[", ,2)
####### Ex 26 ######
apply(iris, 2,boxplot)
####### Ex 26 ######
apply(subset(iris, is.numeric(iris)), 2,boxplot)
subset(iris, is.numeric(iris))
iris
apply(iris, 2,is.numeric)
apply(iris, 2,is.double)
lapply(iris, is.numeric)
sapply(iris, is.numeric)
iris[,sapply(iris, is.numeric)]
####### Ex 26 ######
apply(iris[,sapply(iris, is.numeric)], 2,boxplot)
install.packages("vioplot")
library(vioplot)
apply(iris[,sapply(iris, is.numeric)], 2,function(x) vioplot(x,color = "salmon", xaxt="n"))
apply(iris[,sapply(iris, is.numeric)], 2,vioplot,color = "salmon", xaxt="n")
apply(iris[,sapply(iris, is.numeric)], 2,vioplot,color = "salmon", xaxt="n")
apply(iris[,sapply(iris, is.numeric)], 2,vioplot,color = "salmon", names="")
iris[,sapply(iris, is.numeric)]
apply(iris[,1:4], 2, vioplot,color = "salmon", names="")
apply(iris[,1:4], 2, vioplot)
apply(iris[,sapply(iris, is.numeric)], 2,function(x) vioplot(x,col = "salmon", xaxt="n"))
####### Ex 27 ######
sapply(iris, !(is.numeric))
####### Ex 27 ######
sapply(iris, fuction(x) !is.numeric(x))
####### Ex 27 ######
sapply(iris, fuction(x) not(is.numeric(x)))
####### Ex 27 ######
iris[,!sapply(iris, is.numeric)]
####### Ex 27 ######
!sapply(iris, is.numeric)
levels(iris[,1])
levels(iris[,5])
sapply(iris, levels)
sapply(iris, unique)
levels(iris$Species)
unique(iris$Species)
####### Ex 27 ######
!sapply(iris, is.numeric)
which(sapply(iris, class) != "numeric")
sapply(iris, class)
which(sapply(iris, is.numeric) != TRUE)
which(sapply(iris, class) != "numeric")
####### Ex 28 ######
library(ggplot2)
attach('diamonds')
diamonds
!sapply(diamonds, is.numeric)
which(sapply(diamonds, is.numeric) != TRUE)
apply(diamons, 2, function(x) mean(x[10000:11000]))
apply(diamonds, 2, function(x) mean(x[10000:11000]))
apply(diamonds[,c(8,9,10)], 2, function(x) mean(x[10000:11000]))
names(diamonds[,c(8,9,10)])
names(diamonds)
apply(diamonds[,c(8,9,10)], 2, function(x) round(mean(x[10000:11000]),digits = 1))
sort(apply(diamonds[,c(8,9,10)], 2, function(x) round(mean(x[10000:11000]),digits = 1)))
####### Ex 29 ######
tapply(mtcars, carb,median)
mtcars
####### Ex 29 ######
tapply(mtcars, mtcars$carb,median)
####### Ex 29 ######
aggregate(mtcars, carb, median)
####### Ex 29 ######
aggregate(mtcars, list(mtcars$carb), median)
tapply(mtcars, list(mtcars$carb), median)
list(mtcars$carb)
tapply(mtcars, c(mtcars$carb), median)
tapply(mtcars, mtcars$carb, median)
tapply(mtcars, data.frame(mtcars$carb), median)
####### Ex 29 ######
aggregate(mtcars, list(mtcars$carb), median)
aggregate(.~carb, data = mtcars, median)
####### Ex 30 ######
mymatrix = matrix(data = c(6,34,923,5,0, 112:116, 5,9,34,76,2, 545:549), nrow = 5)
mymatrix
apply(mymatrix, 2, %%)
apply(mymatrix, 2, %)
apply(mymatrix, 2, function(x) x%%10)
hist(mtcars$mpg)
table(mtcars$gear)
table(mtcars$am)
scatter(mtcars$hp,mtcars$hp)
plot(mtcars$hp,mtcars$hp)
plot(mtcars$wt,mtcars$hp)
####### Ex 32 ######
iris.vers = iris[iris$Species = 'versicolor']
####### Ex 32 ######
iris.vers = iris[iris$Species == 'versicolor']
####### Ex 32 ######
iris.vers = subset(iris,iris$Species == 'versicolor')
iris.vers
sepal.dif = iris.vers$Sepal.Length-iris.vers$Sepal.Width
sepal.dif
cbind(iris.vers,sepal.dif)
iris.vers = cbind(iris.vers,sepal.dif)
####### Ex 33 ######
sapply(mtcars, class)
attach(mtcars)
####### Ex 33 ######
remove.packages("ggpot")
####### Ex 33 ######
remove.packages("ggplot2")
attach(mtcars)
mpg
newmtc = data.frame(mpg, as.integer(cyl), disp, hp, drat, wt, qsec,
as.integer(vs), as.integer(am), gear, carb)
sapply(newmtc, class)
newmtc
round(newmtc,1)
mtcars %>% select(cyl, am, vs) %>% as.integer()
mtcars %>% select(cyl, am, vs) %>% as.integer(x)
mtcars %>% select(cyl, am, vs)
mtcars %>% as.integer(select(cyl, am, vs))
subset(data, data$Species == "virginica") %>% filter(Sepal.Width > 3.5)
subset(data, data$Species == "virginica") %>% filter(Sepal.Width > 3.5) %>% select(!(Species))
subset(data, data$Species == "virginica") %>%
filter(Sepal.Width > 3.5) %>%
select(!(Species)) %>%
mutate(positionInCategory = 1:n())
filter(data,Species == "virginica", Sepal.Width > 3.5)
iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,1:4]
row.names(iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,1:4])
iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,1:4]
filter(data,Species == "virginica", Sepal.Width > 3.5)
iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,]
subset(data, data$Species == "virginica") %>%
filter(Sepal.Width > 3.5)
filter(data,Species == "virginica", Sepal.Width > 3.5)
iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,]
subset(data, data$Species == "virginica") %>%
filter(Sepal.Width > 3.5) %>%
select(!(Species))
iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,1:4]
row.names(iris[iris$Species == "virginica" & iris$Sepal.Width>3.5,1:4])
####### Ex 35 ######
apply(iris$Sepal.Length, rep)
####### Ex 35 ######
apply(iris$Sepal.Length,1, rep)
####### Ex 35 ######
sapply(iris$Sepal.Length,1, rep)
####### Ex 35 ######
sapply(iris$Sepal.Length, rep)
####### Ex 35 ######
rep(sapply(iris$Sepal.Length, rep),2)
####### Ex 35 ######
sapply(iris$Sepal.Length, rep)
####### Ex 35 ######
apply(iris$Sepal.Length,2, rep)
####### Ex 35 ######
sapply(iris$Sepal.Length, rep)
rep(iris$Sepal.Length, each=2)
rep(rep(iris$Sepal.Length, each=2),2)
5.9%%2
5.8%%2
ff = 5.9
ff[1]
ff-floor(ff)
(ff-floor(ff)*10)
(ff-floor(ff))*10
(ff-floor(ff))*10%%2
((ff-floor(ff))*10)%%2
iris$Sepal.Length[((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2==1]
iris$Sepal.Length[((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2!=0]
odd(4.6)
(4.6 %% 2) == 0)
(4.6 %% 2) == 0
iris %>% select((Sepal.Length %% 2) != 0)
data %>% select((Sepal.Length %% 2) != 0)
data
data %>% select((data$Sepal.Length %% 2) != 0)
data %>% filter((data$Sepal.Length %% 2) != 0)
iris %>% filter((iris$Sepal.Length %% 2) != 0) %>% select(iris$Sepal.Length)
iris %>% filter((iris$Sepal.Length %% 2) != 0)
iris %>% filter((iris$Sepal.Length %% 2) != 0)
iris$Sepal.Length[((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2!=0]
sep.lengthodd = iris[c(T,F),1]
sep.lengthodd
sep.lengthodd = iris[c(TRUE,FALSE),1]
sep.lengthodd
iris$Sepal.Length[((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2!=0]
((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2
round(((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2)
iris$Sepal.Length[round(((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2)!=0]
round(((5.8-floor(5.8))*10)%%2)
round(((5.8-floor(5.8))*10)%%2)
(5.8-floor(5.8))
(5.8-floor(5.8))*10
8%%2
((5.8-floor(5.8))*10)%%2
((5.8-floor(5.8))*10)
8%%2
((5.8-floor(5.8))*10)
round((5.8-floor(5.8))*10)
round((5.8-floor(5.8))*10)%%2
iris$Sepal.Length[(round((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2)!=0]
sep.lengthodd = iris[c(TRUE,FALSE),1]
iris$Sepal.Length[(round((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2)!=0]
iris$Sepal.Length[(round((iris$Sepal.Length-floor(iris$Sepal.Length))*10)%%2)!=0]
####### Ex 35 ######
rep(iris$Sepal.Length, each=2,times = 2)
rep(sep.everySecond, each = 2)
sep.everySecond = iris[c(TRUE,FALSE),1]
rep(sep.everySecond, each = 2)
newLen = rep(sep.everySecond, each = 2)
iris$Sepal.Length = newLen
iris
####### Ex 36 ######
data = ggplot2::diamonds
install.packages('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
####### Ex 36 ######
library(dplyr)
data = ggplot2::diamonds
data
attach(data)
x
y
remove(x)
attach(data)
subset(data, data$clarity == "SI2", data$depth >=70)
data$clarity
subset(data, data$clarity == "SI2" & data$depth >=70)
diam.sd = subset(data, data$clarity == "SI2" & data$depth >=70)
data[data$clarity == "SI2" & data$depth >=70,]
row.names(data[data$clarity == "SI2" & data$depth >=70,])
rID = row.names(data[data$clarity == "SI2" & data$depth >=70,])
as.integer(rID)
####### Ex 37 ######
subset(data, data$cut == "ideal" & data$carat<0.21)
####### Ex 37 ######
dim(subset(data, data$cut == "ideal" & data$carat<0.21))
####### Ex 37 ######
dim(subset(data, data$cut == "ideal" & data$carat<0.21))[1]
dim(subset(data, data$x+data$y+data$z<0.21))[1]
dim(subset(data, data$price>10000 | data$depth>70))[1]
sum(price > 10000 | depth >= 70)
dim(subset(data, data$price>10000 | data$depth>=70))[1]
####### Ex 38 ######
data[,c(67,982)] %>% select(data$color, data$y)
data[,c(67,982)]
####### Ex 38 ######
data[c(67,982),] %>% select(data$color, data$y)
data[c(67,982),]
####### Ex 38 ######
data[c(67,982),] %>% select(color, y)
data[c(453,792,10489),]
detach(data)
color
data[c(67,982),] %>% select(x, y,z)
data[1:10,] %>% select(x, y,z)
data[1:10,c("x","y","z")]
data[1:1000,] %>% arrange(desc(price))
data[1:1000,] %>% arrange(price)
data[1:1000,] %>% arrange(desc(price,depth))
data[1:1000,] %>% arrange(desc(price),desc(depth))
data[1:1000,] %>% arrange(desc(price),depth)
install.packages("data.table")
install.packages("ISLR") #for the dataset College
library(data.table)
library(ISLR)
dtcollege = data.table(College, keep.rownames = T); class(dtcollege)
####### Ex 50 ######
dtcollege = data.table(College, keep.rownames = T); class(dtcollege)
College
class(College)
class(dtcollege)
summary(dtcollege)
head(dtcollege)
arrange(dtcollege, Grad.Rate)
library(dplyr)
arrange(dtcollege, Grad.Rate)
dtcollege %>% arrange(desc(Grad.Rate))
College %>% arrange(desc(Grad.Rate))
data[1:1000,] %>% arrange(price)
####### Ex 4.a ######
library(dplyr)
update("rlang")
####### Ex 4.a ######
library(dplyr)
####### Ex 36 ######
library(dplyr)
data = ggplot2::diamonds
attach(data)
diam.sd = subset(data, data$clarity == "SI2" & data$depth >=70)
rID = row.names(data[data$clarity == "SI2" & data$depth >=70,])
install.packages("rlang")
install.packages("rlang")
